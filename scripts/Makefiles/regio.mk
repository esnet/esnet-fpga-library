# This Makefile provides generic instructions for executing the regio
# tool to elaborate regmap structures from yaml specifications and
# autogenerate associated RTL.
#
# Usage: this Makefile is used by including it at the end of a 'parent' Makefile,
#        where the parent can call the targets defined here.
#
# Note: Assumes the following path variables have been defined:
# 			- REGIO_ROOT (location of the regio tool)
# 			- LIB_ROOT (location of library root dir)
# ----------------------------------------------------
# Paths
# ----------------------------------------------------
REGIO_YAML_INC_DIR ?= $(LIB_ROOT)
REGIO_SRC_OUTPUT_DIR ?= src
REGIO_INC_OUTPUT_DIR ?= include
REGIO_VERIF_OUTPUT_DIR ?= verif

REGIO_VERIF_HEADERS_OUTPUT_DIR = $(REGIO_VERIF_OUTPUT_DIR)/include
REGIO_VERIF_PACKAGE_OUTPUT_DIR = $(REGIO_VERIF_OUTPUT_DIR)/src

# ----------------------------------------------------
# regio yaml source (provided by parent Makefile)
# ----------------------------------------------------
REG_BLOCK_YAML ?=
REG_DECODER_YAML ?=

REG_BLOCK_OBJS = $(REG_BLOCK_YAML:%.yaml=$(REGIO_SRC_OUTPUT_DIR)/%_reg_blk.sv)
REG_BLOCK_PKGS = $(REG_BLOCK_YAML:%.yaml=$(REGIO_SRC_OUTPUT_DIR)/%_reg_pkg.sv)
REG_DECODER_OBJS = $(REG_DECODER_YAML:%.yaml=$(REGIO_SRC_OUTPUT_DIR)/%.sv)

REG_VERIF_HEADER_OBJS = $(REG_BLOCK_YAML:%.yaml=$(REGIO_VERIF_HEADERS_OUTPUT_DIR)/%_reg_blk_agent.svh)
REG_VERIF_PACKAGE_OBJ = $(REGIO_VERIF_PACKAGE_OUTPUT_DIR)/$(IP_NAME)_reg_verif_pkg.sv

# ----------------------------------------------------
# Options
# ----------------------------------------------------
# (full option list, including defaults)
REGIO_ELABORATE_DEFAULT_OPTS = -i $(REGIO_YAML_INC_DIR)
REGIO_GENERATE_SRC_DEFAULT_OPTS = -o $(REGIO_SRC_OUTPUT_DIR) -g sv
REGIO_GENERATE_HEADERS_DEFAULT_OPTS = -o $(REGIO_VERIF_OUTPUT_DIR)/include -g svh -p $(IP_NAME)_

# (from parent Makefile)
REGIO_ELABORATE_OPTS ?=
REGIO_GENERATE_OPTS ?=

# ----------------------------------------------------
# Commands
# ----------------------------------------------------
REGIO_ELABORATE_CMD := $(REGIO_ROOT)/regio-elaborate $(REGIO_ELABORATE_DEFAULT_OPTS) $(REGIO_ELABORATE_OPTS)
REGIO_GENERATE_SRC_CMD := $(REGIO_ROOT)/regio-generate $(REGIO_GENERATE_SRC_DEFAULT_OPTS) $(REGIO_GENERATE_OPTS)
REGIO_GENERATE_HEADERS_CMD := $(REGIO_ROOT)/regio-generate $(REGIO_GENERATE_HEADERS_DEFAULT_OPTS) $(REGIO_GENERATE_OPTS)

# ----------------------------------------------------
# Targets
# ----------------------------------------------------
_reg: _reg_src _reg_verif

_reg_src: $(REG_BLOCK_OBJS) $(REG_DECODER_OBJS)

_reg_verif: $(REG_VERIF_PACKAGE_OBJ)

$(REGIO_SRC_OUTPUT_DIR)/%_reg_blk.sv: %.yaml | $(REGIO_SRC_OUTPUT_DIR)
	@echo -n "Generating RTL for: $*.yaml ... "
	@$(REGIO_ELABORATE_CMD) -f block $*.yaml | $(REGIO_GENERATE_SRC_CMD) -f block -
	@echo "Done."

$(REGIO_SRC_OUTPUT_DIR)/%_decoder.sv: %_decoder.yaml | $(REGIO_SRC_OUTPUT_DIR)
	@echo -n "Generating RTL for: $*_decoder.yaml ... "
	@$(REGIO_ELABORATE_CMD) -f decoder $*_decoder.yaml | $(REGIO_GENERATE_SRC_CMD) -f decoder -
	@echo "Done."

$(REGIO_VERIF_HEADERS_OUTPUT_DIR)/%_reg_blk_agent.svh: %.yaml | $(REGIO_VERIF_HEADERS_OUTPUT_DIR)
	@echo -n "Generating verification headers for: $*.yaml ... "
	@$(REGIO_ELABORATE_CMD) -f block $*.yaml | $(REGIO_GENERATE_HEADERS_CMD) -f block -
	@echo "Done."
 
$(REG_VERIF_PACKAGE_OBJ): $(REG_VERIF_HEADER_OBJS) | $(REGIO_VERIF_PACKAGE_OUTPUT_DIR)
	@echo -n "Generating verification header manifest package for: $(IP_NAME) library ..."
	@echo "//------------------------------------------------------------------------------" > $(REG_VERIF_PACKAGE_OBJ)
	@echo "// Verification header file manifest for $(IP_NAME) register blocks." >> $(REG_VERIF_PACKAGE_OBJ)
	@echo "//" >> $(REG_VERIF_PACKAGE_OBJ)
	@echo "// NOTE: This file is autogenerated. DO NOT EDIT." >> $(REG_VERIF_PACKAGE_OBJ)
	@echo "//------------------------------------------------------------------------------" >> $(REG_VERIF_PACKAGE_OBJ)
	@echo "" >> $(REG_VERIF_PACKAGE_OBJ)
	@echo "package $(IP_NAME)_reg_verif_pkg;" >> $(REG_VERIF_PACKAGE_OBJ)
	@echo $(foreach header_file,$(notdir $(REG_VERIF_HEADER_OBJS)),'\n`include "$(header_file)"') >> $(REG_VERIF_PACKAGE_OBJ)
	@echo "" >> $(REG_VERIF_PACKAGE_OBJ)
	@echo "endpackage : $(IP_NAME)_reg_verif_pkg" >> $(REG_VERIF_PACKAGE_OBJ)
	@echo "Done."

.PHONY: _reg _reg_src _reg_verif

$(REGIO_SRC_OUTPUT_DIR):
	@mkdir $(REGIO_SRC_OUTPUT_DIR)

$(REGIO_INC_OUTPUT_DIR):
	@mkdir $(REGIO_INC_OUTPUT_DIR)

$(REGIO_VERIF_OUTPUT_DIR):
	@mkdir $(REGIO_VERIF_OUTPUT_DIR)
	@cp $(SCRIPTS_ROOT)/Makefiles/component_reg_verif.mk $(REGIO_VERIF_OUTPUT_DIR)/Makefile
	@cp $(SCRIPTS_ROOT)/env/gitignore_reg $(REGIO_VERIF_OUTPUT_DIR)/.gitignore

$(REGIO_VERIF_HEADERS_OUTPUT_DIR): | $(REGIO_VERIF_OUTPUT_DIR)
	@mkdir $(REGIO_VERIF_HEADERS_OUTPUT_DIR)

$(REGIO_VERIF_PACKAGE_OUTPUT_DIR): | $(REGIO_VERIF_OUTPUT_DIR)
	@mkdir $(REGIO_VERIF_PACKAGE_OUTPUT_DIR)

_clean_reg:
	@rm -rf $(REGIO_SRC_OUTPUT_DIR)
	@rm -rf $(REGIO_INC_OUTPUT_DIR)
	@rm -rf $(REGIO_VERIF_HEADERS_OUTPUT_DIR)
	@rm -rf $(REGIO_VERIF_PACKAGE_OUTPUT_DIR)
