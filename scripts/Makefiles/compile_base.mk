# -----------------------------------------------
# Paths
# -----------------------------------------------
# Specify standard directory structure
INC_DIR ?= include
SRC_DIR ?= src
LIB_DIR ?= lib

# ----------------------------------------------------
# Configuration
# ----------------------------------------------------
# Specify name of compilation library to be created
# Libary name will be autogenerated in form 'ipname_libname':
# e.g. myip_rtl, my_ip_rtl, my_ip_verif
COMPONENT_NAME ?= $(notdir $(abspath $(shell pwd)))
LIB_NAME ?= $(IP_NAME)_$(COMPONENT_NAME)

# ----------------------------------------------------
# Sources
#
#    Process sources specified:
#        - extract source file/include directory references
#          from source lists
#        - auto-populate sources where no sources or source
#          lists are explicitly provided
#        - deduplicate
#
#    Inputs:
#      - INC_DIRS
#      - SRC_FILES
#      - SRC_LIST_FILES
#
#    Outputs:
#      - COMPILE_SRC_FILES
#      - COMPILE_INC_DIRS
# ----------------------------------------------------
# Check if source files have been explicitly specified
ifeq ($(strip $(SRC_FILES) $(SRC_LIST_FILES)),)
	# If not, import all source/header files from $(SRC_DIR) and $(INC_DIR) respectively
	COMPILE_SRC_FILES = $(wildcard $(SRC_DIR)/*.v)  $(wildcard $(SRC_DIR)/*.sv)
	COMPILE_INC_DIRS = $(INC_DIR)
else
	# If so, process source references provided
	_SRC_FILES = $(SRC_FILES)
	_INC_DIRS = $(INC_DIRS)
	ifneq ($(strip $(SRC_LIST_FILES)),)
		# Convert source file list to arrays of source files and include directories here
		# Note: These lists need to be created dynamically (i.e. = instead of :=)
		#       in case .f files are generated dynamically as part of the simulation process
		FILE_LIST_EXISTS = $(wildcard $(filelist))
		FILE_LIST = $(if $(FILE_LIST_EXISTS),$(shell cat $(filelist)))
		FILE_REFS = $(foreach filelist,$(SRC_LIST_FILES),$(FILE_LIST))
		_SRC_FILES += $(filter-out +incdir+%,$(FILE_REFS))
		_INC_DIRS += $(subst +incdir+,,$(filter +incdir+%,$(FILE_REFS)))
	endif
	COMPILE_SRC_FILES = $(sort $(filter %.v,$(_SRC_FILES)))
	COMPILE_SRC_FILES += $(sort $(filter %.sv,$(_SRC_FILES)))
	COMPILE_INC_DIRS = $(sort $(_INC_DIRS))
endif

# -----------------------------------------------
# Component dependencies
#
#    Process component dependencies specified:
#        - normalize 'local' references by adding full library paths
#        - deduplicate
#
#    Inputs:
#        - COMPONENTS
#
#    Outputs:
#        - COMPONENT_REFS
#        - COMPONENT_NAMES
#        - COMPONENT_PATHS
# -----------------------------------------------
COMPONENTS ?=

# Normalize component references:
#	If reference is in form lib_name=lib_path, assume 'external' component, or component outside IP library. Use reference as given.
#   If reference is in form lib_name, assume 'local' component, or component within same IP library. Modify reference as follows:
#		lib_name ->  [ip_name]_[lib_name]=[ip_path]/[lib_name]/lib
COMPONENTS_NORMALIZED = $(foreach component, $(COMPONENTS), $(if $(findstring =,$(component)), $(component), $(IP_NAME)_$(component)=$(abspath $(IP_ROOT))/$(subst .,/,$(component))))
# 'Function' to extract "component_name component_path" tuples from "component_name=component_path" references
component_tuple = $(subst =, ,$(component))
# Extract component_name
COMPONENT_NAMES := $(foreach component,$(COMPONENTS_NORMALIZED),$(shell echo $(firstword $(component_tuple)) | tr '[:upper:]' '[:lower:]' | tr '.' '_'))
# Extract component paths
COMPONENT_PATHS := $(foreach component,$(COMPONENTS_NORMALIZED),$(abspath $(lastword $(component_tuple))))
# Resynthesize component references
COMPONENT_REFS_UNSAFE := $(join $(addsuffix =,$(COMPONENT_NAMES)),$(COMPONENT_PATHS))
#   Filter out 'self' references to avoid circular dependencies
COMPONENT_REFS = $(filter-out $(LIB_NAME)=$(abspath $(shell pwd)),$(COMPONENT_REFS_UNSAFE))

# -----------------------------------------------
# Subcomponent dependencies
# -----------------------------------------------
subcomponent_lib_file = $(wildcard $(component_path)/lib/sub.libs)
get_subcomponent_libs = $(if $(wildcard $(subcomponent_lib_file)),$(shell cat $(subcomponent_lib_file) | tr '\n' ' '))
SUBCOMPONENT_LIBS = $(sort $(foreach component_path,$(COMPONENT_PATHS),$(get_subcomponent_libs)))

# -----------------------------------------------
# Subcomponent dependencies
# -----------------------------------------------
DEFINES += SIMULATION
