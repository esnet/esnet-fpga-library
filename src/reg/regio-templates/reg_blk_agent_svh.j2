//------------------------------------------------------------------------------
// Agent class for {{ blk.name }} register block.
//
// NOTE: This file is autogenerated by regio. DO NOT EDIT.
//------------------------------------------------------------------------------

class {{ blk.name_lower }}_reg_blk_agent #(
    parameter int REG_ADDR_WID = 32,
    parameter int REG_DATA_WID = 32
) extends reg_verif_pkg::reg_blk_agent#(REG_ADDR_WID, REG_DATA_WID);

    // -------------------------------------------------------------
    // Methods
    // -------------------------------------------------------------

    // Constructor
    function new(input string name="{{ blk.name_lower }}_reg_blk_agent", input int BASE_ADDR=0);
        super.new(name, BASE_ADDR);
    endfunction
{% for reg in blk.regs: -%}
  {%- if reg.access == "none" %}
    {%- continue %}
  {%- endif %}
    // {{ reg.name_upper }} ({{ reg.width }}-bit, {{ reg.access }})
  {%- if reg.access in ["ro", "rw", "rd_evt", "wr_evt"] %}
    task read_{{ reg.name_lower }}({{ "input int array_idx, " if reg.count > 1}}output {{ blk.name_lower }}_reg_pkg::reg_{{ reg.name_lower }}_t reg_{{ reg.name_lower }});
        data_t rd_data;
        _read({{ blk.name_lower }}_reg_pkg::OFFSET_{{ reg.name_upper }}{{ "[array_idx]" if reg.count > 1}}, rd_data);
        reg_{{ reg.name_lower }} = {{ blk.name_lower }}_reg_pkg::reg_{{ reg.name_lower }}_t'(rd_data);
    endtask
  {% endif %}
  {%- if reg.access in ["rw", "wr_evt", "wo"] %}
    task write_{{ reg.name_lower }}({{ "input int array_idx, " if reg.count > 1}}input {{ blk.name_lower }}_reg_pkg::reg_{{ reg.name_lower }}_t reg_{{ reg.name_lower }});
        _write({{ blk.name_lower }}_reg_pkg::OFFSET_{{ reg.name_upper }}{{ "[array_idx]" if reg.count > 1}}, reg_{{ reg.name_lower }});
    endtask
  {% endif %}
{%- endfor %}
endclass : {{ blk.name_lower }}_reg_blk_agent

